// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/pull/interface.go

// Package mock_pull is a generated GoMock package.
package mock_pull

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pull "github.com/replicatedhq/kots/pkg/pull"
)

// MockPuller is a mock of Puller interface.
type MockPuller struct {
	ctrl     *gomock.Controller
	recorder *MockPullerMockRecorder
}

// MockPullerMockRecorder is the mock recorder for MockPuller.
type MockPullerMockRecorder struct {
	mock *MockPuller
}

// NewMockPuller creates a new mock instance.
func NewMockPuller(ctrl *gomock.Controller) *MockPuller {
	mock := &MockPuller{ctrl: ctrl}
	mock.recorder = &MockPullerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPuller) EXPECT() *MockPullerMockRecorder {
	return m.recorder
}

// Pull mocks base method.
func (m *MockPuller) Pull(upstreamURI string, pullOptions pull.PullOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", upstreamURI, pullOptions)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pull indicates an expected call of Pull.
func (mr *MockPullerMockRecorder) Pull(upstreamURI, pullOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockPuller)(nil).Pull), upstreamURI, pullOptions)
}
