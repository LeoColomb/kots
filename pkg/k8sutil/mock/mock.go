// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/k8sutil/interface.go

// Package mock_k8sutil is a generated GoMock package.
package mock_k8sutil

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kubernetes "k8s.io/client-go/kubernetes"
)

// MockK8sutil is a mock of K8sutil interface.
type MockK8sutil struct {
	ctrl     *gomock.Controller
	recorder *MockK8sutilMockRecorder
}

// MockK8sutilMockRecorder is the mock recorder for MockK8sutil.
type MockK8sutilMockRecorder struct {
	mock *MockK8sutil
}

// NewMockK8sutil creates a new mock instance.
func NewMockK8sutil(ctrl *gomock.Controller) *MockK8sutil {
	mock := &MockK8sutil{ctrl: ctrl}
	mock.recorder = &MockK8sutilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockK8sutil) EXPECT() *MockK8sutilMockRecorder {
	return m.recorder
}

// GetClientset mocks base method.
func (m *MockK8sutil) GetClientset() (kubernetes.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientset")
	ret0, _ := ret[0].(kubernetes.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientset indicates an expected call of GetClientset.
func (mr *MockK8sutilMockRecorder) GetClientset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientset", reflect.TypeOf((*MockK8sutil)(nil).GetClientset))
}
